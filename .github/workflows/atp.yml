name: Run atp.py (every 2 hours) - single yml

on:
  schedule:
    - cron: '0 */2 * * *'   # her 2 saatte bir
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  run-atp:
    runs-on: ubuntu-latest
    timeout-minutes: 170
    env:
      # maksimum script süresi (saniye) - burada 150 dakika = 9000s
      ATP_TIMEOUT_SECONDS: "9000"
    steps:
      - name: Checkout repository (with credentials)
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install requests beautifulsoup4 lxml || true
        shell: bash

      - name: Ensure atp folders exist & writable
        run: |
          mkdir -p atp/logs
          mkdir -p atp/playlists
          chmod -R a+rw atp || true
        shell: bash

      - name: Run atp.py and capture log (timeout enforced)
        id: run_atp
        run: |
          TIMESTAMP=$(date -u +"%Y%m%dT%H%M%SZ")
          LOGFILE="atp/logs/atp_run_${TIMESTAMP}.log"
          echo "Running atp/atp.py at ${TIMESTAMP} (UTC)" > "$LOGFILE"
          # Use timeout to avoid runaway processes (timeout is in seconds from env)
          TIMEOUT_SECONDS=${ATP_TIMEOUT_SECONDS:-9000}
          # If 'timeout' not available, fallback to direct run
          if command -v timeout >/dev/null 2>&1; then
            timeout --preserve-status "${TIMEOUT_SECONDS}"s python atp/atp.py >> "$LOGFILE" 2>&1 || echo "Script exited with non-zero status or was terminated" >> "$LOGFILE"
          else
            python atp/atp.py >> "$LOGFILE" 2>&1 || echo "Script exited with non-zero status" >> "$LOGFILE"
          fi
          # show last lines for quick feedback
          tail -n 200 "$LOGFILE" || true
        shell: bash

      - name: Upload logs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: atp-logs
          path: atp/logs/

      - name: Stage atp/ outputs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A atp || true
        shell: bash

      - name: Commit & try push with GITHUB_TOKEN
        id: try_push
        run: |
          set -e
          # if there are changes, commit and push
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "chore(atp): update generated files under atp/ [ci skip]" || true
            # Try push (this will use GITHUB_TOKEN because persist-credentials: true)
            if git push origin HEAD; then
              echo "pushed=true" >> $GITHUB_OUTPUT
            else
              echo "pushed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "pushed=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Fallback — create branch & PR using PUSH_PAT (if push failed)
        if: steps.try_push.outputs.pushed == 'false'
        env:
          PUSH_PAT: ${{ secrets.PUSH_PAT }}
          REPO: ${{ github.repository }}
          BASE_BRANCH: ${{ github.ref_name }}
        run: |
          if [ -z "$PUSH_PAT" ]; then
            echo "PUSH_PAT secret is not set. Cannot push or create PR. Exiting fallback step."
            exit 0
          fi

          # Set remote to use PAT
          git remote set-url origin https://x-access-token:${PUSH_PAT}@github.com/${REPO}.git

          # Create a new branch name
          BRANCH="atp/auto-update-$(date -u +'%Y%m%dT%H%M%SZ')"
          git checkout -b "$BRANCH" || git checkout "$BRANCH" || true

          git add -A atp || true

          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "chore(atp): update generated files under atp/ [ci skip]" || true
            git push --set-upstream origin "$BRANCH"

            # Create PR via API (construct minimal JSON)
            BODY=$(printf '{"title":"%s","head":"%s","base":"%s","body":"Automated PR: updates generated by atp script."}' "chore(atp): update generated files under atp/ (automated)" "$BRANCH" "$BASE_BRANCH")
            curl -s -X POST -H "Authorization: token ${PUSH_PAT}" -H "Accept: application/vnd.github+json" https://api.github.com/repos/${REPO}/pulls -d "$BODY" | tee pr_response.json
            echo "Created PR response saved to pr_response.json"
          else
            echo "No changes to commit for PR."
          fi
        shell: bash

      - name: Debug - list atp dir
        run: |
          echo "atp directory listing:"
          ls -la atp || true
        shell: bash